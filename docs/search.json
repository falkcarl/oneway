[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "one-way ANOVA practice and simulator",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1200\n\n######################################################################\n## Copyright 2024 Carl F. Falk\n##\n## This program is free software: you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation, either version 3 of\n## the License, or (at your option) any later version.\n##\n## This program is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n## GNU General Public License for more details.\n## &lt;http://www.gnu.org/licenses/&gt;\n\nlibrary(shiny)\nlibrary(xtable)\nlibrary(gtools)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(effectsize)\n#library(report) # auto-generates APA-style report...\n#library(shinyjs) # not used\nlibrary(ggplot2) # not used\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n  \n  # create dataset and descriptives\n  dat &lt;- eventReactive({input$newdat},{\n    \n    # get options\n    J &lt;- input$ngroups\n    opts &lt;- input$genoptions\n    #\"Normality\"\n    #\"Equal variances\"\n    #\"Ensure equal sample sizes\"\n    #\"Null hypothesis true\"\n    \n    # Sample size\n    # N size hard coded between 2 and 6\n    if(\"Ensure equal sample sizes\" %in% opts){\n      Ng &lt;- rep(input$nsize, J)\n    } else {\n      alph &lt;- rep(1, length(2:6))\n      alph[input$nsize-1] &lt;- 5\n      probs &lt;- as.vector(rdirichlet(1, alph))\n      Ng &lt;- sample(2:6, J, replace=TRUE, prob = probs)\n    }\n\n    # generate population parameters    \n    if (\"Normality\" %in% opts){\n      if(\"Null hypothesis true\" %in% opts){\n        mu &lt;- rep(rnorm(1, 5, 2),J)\n      } else {\n        mu &lt;- rnorm(J, 5, 2)\n      }\n      \n      if(\"Equal variances\" %in% opts){\n        sd &lt;- rep(abs(rnorm(1, 2, 1.5)), J)\n      } else {\n        sd &lt;- abs(rnorm(J, 2, 1.5))\n      }\n      \n    } else {\n      \n      # flip a coin to do: log-normal or contaminated normal\n      mix &lt;- .5\n      whichdist &lt;- rbinom(1, 1, prob=c(.5,.5))\n      if(\"Null hypothesis true\" %in% opts){\n        if(whichdist == 0 ){\n          # log-normal\n          mu &lt;- rep(rnorm(1, 0, 1),J)\n        } else {\n          # contaminated normal\n          mu &lt;- rep(rnorm(1, 5, 2),J)\n        }\n        \n      } else {\n        if(whichdist == 0){\n          # log-normal\n          mu &lt;- rnorm(J, 0, 1)\n        } else {\n          # contaminated normal\n          mu &lt;- rnorm(J, 5, 2)\n        }\n      }\n      \n      if(\"Equal variances\" %in% opts){\n        if(whichdist == 0){\n          # log-normal\n          sd &lt;- rep(abs(rnorm(1, 1, 1.5)), J)\n        } else {\n          # contaminated normal\n          sd &lt;- rep(abs(rnorm(1, 1, 1.5)), J)\n        }\n      } else {\n        if(whichdist == 0){\n          # log-normal\n          sd &lt;- abs(rnorm(J, 1, 1.5))\n        } else {\n          # contaminated normal\n          sd &lt;- abs(rnorm(J, 1, 1.5))\n        }\n      }\n    }\n    \n    # generate data\n    Y&lt;-vector(\"numeric\")\n    X&lt;-vector(\"character\")\n    for(j in 1:J){\n\n      X&lt;-c(X, rep(paste(\"Group\",j), Ng[j]))      \n      if (\"Normality\" %in% opts){\n        # normal\n        Y&lt;-c(Y, round(rnorm(Ng[j], mu[j], sd[j]),2))\n      } else {\n        if(whichdist == 0){\n          # log-normal\n          Y&lt;-c(Y, round(rlnorm(Ng[j], mu[j], sd[j]),2))          \n        } else {\n          # contaminated normal? did not check carefully yet...    \n          # mixing proportion hard-coded for now\n          contam &lt;- rnorm(Ng[j], mu[j], 2*sd[j])\n          Y&lt;-c(Y, round(.5*rnorm(Ng[j], mu[j], sd[j]/2)+.5*contam,2))\n        }\n      }\n    }\n    data &lt;- data.frame(X=X,Y=Y)\n    out &lt;- list(data = data\n            )\n    out\n  })\n  \n  # display of raw data\n  output$rawData &lt;- renderDataTable({\n    data &lt;- dat()\n    data$data}\n  )\n  \n  # display of descriptive statistics\n  output$desc &lt;- function(){\n     d &lt;- dat()\n     \n     d$data %&gt;% group_by(X) %&gt;%\n       summarise(N = n(),\n                 mean = mean(Y),\n                 sd = sd(Y),\n                 var = var(Y)) %&gt;%\n       knitr::kable(format=\"html\", digits=3) %&gt;%\n       kableExtra::kable_styling(\"striped\", full_width=T)\n  }\n  \n  # plots\n  output$plots &lt;- renderPlot({\n    data &lt;- dat()    \n    ggplot(data$data, aes(x=X, y=Y)) + geom_boxplot()\n  })\n  \n  # F test\n  output$results &lt;- renderPrint({\n    data &lt;- dat()\n    data &lt;- data$data\n    alpha &lt;- as.numeric(input$alpha)\n    \n    N &lt;- nrow(data)\n    k &lt;- input$ngroups\n    \n    # df\n    dfM &lt;- k-1\n    dfR &lt;- N-k\n    dfT &lt;- N-1\n    \n    # SS\n    Xbar &lt;- round(mean(data$Y), 3)\n    SST &lt;- sum(round((data$Y-Xbar)^2,3)) %&gt;% round(digits=3)\n    SSM &lt;- data %&gt;% group_by(X) %&gt;%\n      summarise(SS = n()*(mean(Y)-Xbar)^2) %&gt;%\n      summarise(sum(SS)) %&gt;% unlist() %&gt;% round(digits=3)\n    SSR &lt;- data %&gt;% group_by(X) %&gt;%\n      summarise(SS = sum((Y-mean(Y))^2)) %&gt;%\n      summarise(sum(SS)) %&gt;% unlist() %&gt;% round(digits=3)\n    \n    # MS\n    MSM &lt;- round(SSM/dfM, digits=3)\n    MSR &lt;- round(SSR/dfR, digits=3)\n    \n    # F\n    Fratio &lt;- round(MSM/MSR, digits=3)\n    Fcrit &lt;- round(qf(alpha, dfM, dfR, lower.tail=FALSE), digits=3)\n    reject &lt;- ifelse(Fratio &gt; Fcrit, TRUE, FALSE)\n\n    # create output\n    out &lt;- \"\"\n    out &lt;- paste0(out, \"alpha: \", input$alpha, \"\\n\")\n    out &lt;- paste0(out, \"Grand mean: \", Xbar, \"\\n\")\n    \n    out &lt;- paste0(out, \"SSM: \", SSM, \"\\n\")\n    out &lt;- paste0(out, \"SSR: \", SSR, \"\\n\")\n    out &lt;- paste0(out, \"SST: \", SST, \"\\n\")\n    \n    out &lt;- paste0(out, \"dfM: \", dfM, \"\\n\")\n    out &lt;- paste0(out, \"dfR: \", dfR, \"\\n\")\n    out &lt;- paste0(out, \"dfT: \", dfT, \"\\n\")\n    \n    out &lt;- paste0(out, \"MSM: \", MSM, \"\\n\")\n    out &lt;- paste0(out, \"MSR: \", MSR, \"\\n\")\n    \n    out &lt;- paste0(out, \"F: \", Fratio, \"\\n\")\n    \n    out &lt;- paste0(out, \"\\n\")\n    out &lt;- paste0(out, \"Critical F: \", Fcrit, \"\\n\")\n    \n    out &lt;- paste0(out, \"\\n\")\n    out &lt;- paste0(out, \"reject H0? \", ifelse(reject, \"Yes\", \"No\"), \"\\n\")\n    \n\n    cat(out)\n  })\n\n}\n\nui &lt;- fluidPage(\n\n    # Application title\n    #titlePanel(\"\"),\n\n    # Layout of UI\n    sidebarLayout(\n      \n      sidebarPanel(strong(\"Data Generation Options\"),\n                  numericInput(\"ngroups\",\n                       \"Number of groups:\",\n                       value = 3,\n                       step = 1,\n                       min = 2,\n                       max = 5),\n                  numericInput(\"nsize\",\n                       \"Typical sample size per group\",\n                       value = 3,\n                       step = 1,\n                       min = 2,\n                       max = 12),\n                   checkboxGroupInput(\"genoptions\",\n                                      NULL,\n                                      choices = c(\"Normality\",\n                                                  \"Equal variances\",\n                                                  \"Ensure equal sample sizes\",\n                                                  \"Null hypothesis true\"),\n                                      selected= c(\"Normality\",\n                                                  \"Equal variances\",\n                                                  \"Ensure equal sample sizes\",\n                                                  \"Null hypothesis true\")),\n                   actionButton(\"newdat\",\n                        \"Generate New Dataset\"),\n                   br(),\n                   br(),\n                   strong(\"Analysis options\"),\n                   selectInput(\"alpha\",\n                               label = \"alpha:\",\n                               choices = c(.05,.005,.01,.02, .1, .2, .3, .4, .5)\n                   )\n                   \n      ),\n      # Main Panel\n      mainPanel(\n          tabsetPanel(\n            tabPanel(\"Raw Data\",\n                     dataTableOutput(\"rawData\")),\n             tabPanel(\"Descriptive Stats\",\n                      tableOutput(\"desc\")),\n             tabPanel(\"Results\",\n                      verbatimTextOutput(\"results\")                     \n             ),\n            tabPanel(\"Visualization\",\n                     plotOutput(\"plots\")    \n            )\n          )\n      )\n    ) # end sidebarLayout\n)\n\nshinyApp(ui = ui, server = server)"
  }
]